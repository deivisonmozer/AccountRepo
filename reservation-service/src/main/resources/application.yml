spring:
  kafka:
    consumer:
      value-deserializer: "org.springframework.kafka.support.serializer.JsonDeserializer"
      properties:
        "[spring.json.value.default.type]": "edu.miu.sa.reservation.entity.Account"
        "[spring.json.trusted.packages]": ["edu.miu.sa.reservation"]
    producer:
      value-serializer: "org.springframework.kafka.support.serializer.JsonSerializer"
      properties:
        "[spring.json.add.type.headers]": false
---
spring:
  config:
    activate:
      on-profile: dev
  kafka:
    bootstrap-servers: "localhost:9092"
  data:
    cassandra:
      port: 9042
      contact-points: account-db
      keyspace-name: account
      schema-action: create_if_not_exists
      entity-base-package: edu.miu.sa.reservation.entity
kafka:
  topic:
    get: "GetAccountEvent"
    response: "ResponseGetAccountEvent"
    created: "AccountCreatedEvent"
  id: "myId2"
jwt:
  secret: "top_secret"
---
spring:
  config:
    activate:
      on-profile: prod
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVER}
  main:
    allow-bean-definition-overriding: ${SPRING_ALLOW_BEAN_DEFINITION_OVERRIDING}
  data:
    cassandra:
      port: ${DB_PORT}
      contact-points: ${DB_CONTACT_POINT}
      keyspace-name: ${DB_ACCOUNT_KEYSPACE}
      schema-action: ${DB_SCHEME_ACTION}
      #entity-base-package: edu.miu.sa.reservation.entity
kafka:
  topic:
    get: ${ACCOUNT_REQUEST_TOPIC}
    response: ${ACCOUNT_GET_TOPIC}
    created: ${ACCOUNT_CREATED_TOPIC}
  id: ${ACCOUNT_ID}
server:
  port: ${SERVICE_PORT}

jwt:
  secret: ${JWT_SECRET}